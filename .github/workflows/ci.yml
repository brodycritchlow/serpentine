name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  pull-requests: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Build binary
      run: cargo build --release --verbose

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ github.event_name == 'pull_request' && secrets.GITHUB_TOKEN || github.token }}
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Check formatting
      if: github.event_name != 'pull_request'
      run: cargo fmt -- --check
    
    - name: Run formatter with auto-fix (PRs only)
      if: github.event_name == 'pull_request'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        git fetch origin ${{ github.head_ref }}
        git checkout ${{ github.head_ref }}
        
        cargo fmt
        
        if [[ -n $(git status -s) ]]; then
          echo "Formatter made automatic fixes"
          git add -A
          git commit -m "ðŸ¤– Auto-format code"
          git push origin ${{ github.head_ref }}
        else
          echo "No formatting fixes needed"
        fi
    
    - name: Run clippy
      if: github.event_name != 'pull_request'
      run: cargo clippy -- -D warnings
    
    - name: Run clippy with auto-fix (PRs only)
      if: github.event_name == 'pull_request'
      run: |
        cargo clippy --fix --allow-dirty --allow-staged -- -D warnings || true
        
        if [[ -n $(git status -s) ]]; then
          echo "Clippy made automatic fixes"
          git add -A
          git commit -m "ðŸ¤– Auto-fix clippy warnings"
          git push origin ${{ github.head_ref }}
        else
          echo "No clippy fixes needed"
          # Run clippy again to ensure everything passes
          cargo clippy -- -D warnings
        fi

  test-multiple-platforms:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Run tests
      run: cargo test
    
    - name: Test CLI
      run: |
        cargo build
        echo "x: int = 42" > test.py
        echo "x = 'hello'" >> test.py
        cargo run -- test.py || exit 0  # We expect this to fail, so invert the exit code
      shell: bash

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust 1.88.0
      uses: dtolnay/rust-toolchain@1.88.0
    
    - name: Check MSRV
      run: cargo check --verbose